<?php
/**
 * @file
 * Contains the authentication process and login form alters need to handle
 * login through Publizon.
 *
 * It also handle the user account related blocks.
 */

/**
 * Implement hook_form_alter().
 *
 * Alter the login page and login block changing the fields and adding custom
 * validation function to handle authentication with publizon.
 */
function publizon_user_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
      // Login form found, so change labels and description.
      $form['name']['#prefix'] = '<h1>' . t('Welcome to Netlydbog.dk') . '</h1><p>' . t('We noticed that you are not logged in.') . '</p><p>' . t('Please fill in your CPR number + pincode to login.') . '</p>';
      $form['name']['#title'] = t('CPR number');
      $form['pass']['#title'] = t('Pincode');
      $form['name']['#type'] = 'password';

      // Remove descriptions from the login fields.
      unset($form['name']['#description']);
      unset($form['pass']['#description']);

      // Selection of library to the form.
      $form['retailer_id'] = array(
        '#type' => 'select',
        '#title' => t('Dit bibliotek'),
        '#options' => publizon_get_libraries(),
      );

      // Add validation function to the front of validation array.
      array_unshift($form['#validate'], 'publizon_user_login_validate');
  }
}

/**
 * Validation function for the login form alter above. The user is validated
 * against the Publizon web-service.
 *
 * @todo: Make the the redirect configurable.
 */
function publizon_user_login_validate($form, &$form_state) {
  // If no credentials are presented, return.
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    return;
  }

  // The user may use both borrower card / cpr number to login, so we have to
  // remove anything thats not an number form the user name.
  $login_id = preg_replace('/\D+/', '', $form_state['values']['name']);

  // Try to login to the library, this will create the user if login succeed
  // and the user do not exists in Drupal.
  $account = publizon_user_authentication($login_id, $form_state['values']['pass'], $form_state['values']['retailer_id']);
  if ($account) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
    drupal_goto('min_side');
  }
}

/**
 * Creates a unique identifier for a given user based on the input parameter.
 *
 * @todo: Moved seed value into settings.php and upgraded to SHA function.
 *
 * @param string $login_id
 *  This should be the users login id (card number or CPR).
 * @return string
 *  MD5 seeded value of the login id.
 */
function publizon_user_encode_pid($login_id) {
  return md5(drupal_get_private_key() . $login_id);
}

/**
 * Validate the user against the librarys sytems and creates the user if he/her
 * do no exists in Drupal.
 *
 * @param string $login_id
 * @param string $pass
 * @param string $retailer_id
 * @return object $user if success or FALSE on failur.
 */
function publizon_user_authentication($login_id, $pass, $retailer_id) {
  // Get informtaion about the libray the user have selected on the login page
  // and get a connection to Publizon base on that information.
  $library = publizon_get_library($retailer_id);
  $client = PublizonClient::getClient($retailer_id, $library['retailer_key_code']);

  // Validate the user.
  if ($client->validateLibraryUser($login_id, $pass)) {
    // Store login information need to communicat with Publizon in the users
    // current session.
    $_SESSION['login_id'] = $login_id;
    $_SESSION['pass'] = $pass;
    $_SESSION['retailer_id'] = $retailer_id;
    $_SESSION['retailer_key_code'] = md5($library['retailer_key_code']);

    // Get the users account or create a new account.
    $account = publizon_user_load_account($login_id, $retailer_id);
    if (!$account) {
      // User have been validate, but no account was found. So lets create one.
      $random_name = time() . mt_rand();

      // User data to pass to user_save().
      $user_data = array(
        'name' => $random_name,
        'display_name' => t('Publizon user'),
        'mail' => $random_name . '@mail.invalid',
        'pass' => microtime(TRUE) . mt_rand(), // Login via Drupal's standard login should not be possible.
        'status' => 1,
      );

      // Set the initial e-mail to the same e-mail-address.
      $user_data['init'] = $user_data['mail'];

      // Saves the user and returns the user UID, which will create the user in
      // Drupal.
      $account = user_save(NULL, $user_data);

      // Store user reference in our own table.
      db_query("INSERT INTO {publizon_user} (uid, pid, retailer_id)
                     VALUES (%d, '%s', '%s');", $account->uid, publizon_user_encode_pid($login_id), $retailer_id);
    }
    return $account;
  }
  return FALSE;
}

/**
 * Helper function that loads a Drupal account based on a user login id and a
 * retailer id.
 *
 * It has support for the old encoding of the user ids.
 *
 * @param string $login_id
 *  Login id provided by the current user (it can be either cardno or CPR).
 * @param string $retailer_id
 *  Publizon retailer id the represents a library.
 * @return type
 */
function publizon_user_load_account($login_id, $retailer_id) {
  // Check if user is known in the systemt.
  $pid = publizon_user_encode_pid($login_id);
  $uid = db_result(db_query("SELECT uid
                               FROM {publizon_user}
                              WHERE pid = '%s'", $pid));
  if ($uid) {
    db_query("UPDATE {publizon_user} SET retailer_id = %d
               WHERE pid = '%s'", $retailer_id, $pid);
    return user_load(array('uid' => $uid));
  }

  // Test if old encoding is used (security fix) and update it.
  $uid = db_result(db_query("SELECT uid
                               FROM {publizon_user}
                              WHERE pid = md5('%s')", $login_id));
  if ($uid) {
    db_query("UPDATE {publizon_user} SET retailer = %d, pid = '%s'
               WHERE pid = md5('%s')", $retailer_id, $pid, $login_id);
    return user_load(array('uid' => $uid));
  }

  return FALSE;
}

/**
 * Implementation of hook_block().
 *
 * Implemnets the blocks thats mainly is located on the "my page" panel after
 * the user is logged in. If you are looking for my loans look in
 * publizon_loans.
 */
function publizon_user_block($op = 'list', $delta = 0) {
  $block = array();
  switch ($op) {
    case 'list':
      $block['logout'] = array(
        'info' => 'Logout button (Publizon)',
        'cache' => BLOCK_NO_CACHE,
      );

      $block['welcome'] = array(
        'info' => 'Welcome header (Publizon)',
        'cache' => BLOCK_NO_CACHE,
      );
      break;

    case 'view':
      // Get the current user.
      global $user;

      switch ($delta) {
        case 'welcome':
          // Default content.
          $content = t('Welcome to my page. If you see this message an error have happend.');

          try {
            // Get max loans for the library.
            $library_profile = new PublizonLibrary();

            // Add welcom information.
            $content = '<p class="spacing-before">' .
              t('Welcome! As user at @library you are allowed to download @amount at the same time.', array(
                '@library' => $library_profile->name,
                '@amount' => format_plural($library_profile->getMaxLoans(), 'one product', '@count products'),
              )) . '</p>';

            // If the current user and type have 0 loans left.
            $user_loans = new PublizonUserLoans($user->uid);
            if (isset($user_loans->usere_book_loans_remain) && $user_loans->usere_book_loans_remain == 0) {
              $content .= '<p class="next-loan-periode">' . $user_loans->nextLoanPeriode() . '</p>';
            }
          }
          catch (Exception $e) {
            // The message is translated in the custom exception.
            drupal_set_message($e->getMessage(), 'error', FALSE);
          }
          // Add content to output.
          $block = array(
            'content' => $content,
          );

          break;

        case 'logout':
          $content = '';
          if ($user->uid) {
            $content = '<p>' . t('You are logged in: !link', array('!link' => l(t('Logout'), 'logout', array('attributes' => array('class' => 'logout-button'))))) . '</p>';
          }
          $block = array(
            'subject' => t('My profile'),
            'content' => $content,
          );
          break;
      }
  }
  return $block;
}


/**
 * Test if the current user is logged into Publizon. The user may be a normal
 * Drupal user.
 *
 * @global object $user
 *
 * @return mixed
 *  Drupal uid if the user is logged in else FALSE.
 */
function publizon_user_is_logged_in() {
  global $user;
  if ($user->uid != 0 && isset($_SESSION['login_id']) && $_SESSION['login_id']) {
    return $user->uid;
  }
  return FALSE;
}

/**
 * Gets the current users login credentials.
 *
 * @return mixed
 *  If the current user is logged in a keyed array with information is returned
 *  else FALSE.
 */
function publizon_user_get_credentials() {
  if (publizon_user_is_logged_in()) {
    return array(
      'login_id' => $_SESSION['login_id'],
      'pass' => $_SESSION['pass'],
      'retailer_id' => $_SESSION['retailer_id'],
    );
  }
  return FALSE;
}